// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package [module].actions;

import java.io.StringWriter;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

/**
 * Create an XML object and return it as a string.
 *
 * Example:
 * <?xml>
 * <Entity.Object>
 *     <Parent>
 *         <PropOne>Hello World</PropOne>
 *         <PropTwo>012345</PropTwo>
 *     </Parent>
 * </Entity.Object>
 *
 * @see https://stackoverflow.com/a/50148098/3601434
 *
 * @return XML string
 */
public class Create_XML extends CustomJavaAction<java.lang.String>
{
	private java.lang.String PropOne;
	private java.math.BigDecimal PropTwo;

	public Create_XML(IContext context, java.lang.String PropOne, java.math.BigDecimal PropTwo)
	{
		super(context);
		this.PropOne = PropOne;
		this.PropTwo = PropTwo;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		String xmlstring = "";

		try {

			// Create doc from docbuilder
			DocumentBuilderFactory documentFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder documentBuilder = documentFactory.newDocumentBuilder();
			Document document = documentBuilder.newDocument();

			// Define root element
			Element root = document.createElement("Entity.Object");
			document.appendChild(root);

			// Define parent element
			Element parent = document.createElement("parent");
			root.appendChild(parent);

			// Add property
			Element propOne = document.createElement("PropOne");
			propOne.appendChild(document.createTextNode(this.PropOne));
			parent.appendChild(propOne);

			// Add property from Number
			Element propTwo = document.createElement("PropTwo");
			propTwo.appendChild(document.createTextNode(String.valueOf(this.PropTwo)));
			parent.appendChild(propTwo);

			// Create transformer to interpret doc
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			StringWriter writer = new StringWriter();
			transformer.transform(new DOMSource(document), new StreamResult(writer));

			// Convert XML to string
			xmlstring = writer.getBuffer().toString();

		} catch (ParserConfigurationException pce) {
			throw new com.mendix.systemwideinterfaces.MendixRuntimeException("Could not parse XML document");
		} catch (TransformerException tfe) {
			throw new com.mendix.systemwideinterfaces.MendixRuntimeException("Could not transform XML document to string");
		}

		return xmlstring;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Create_XML";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}

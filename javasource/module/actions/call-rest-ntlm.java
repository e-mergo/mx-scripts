// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package [module].actions;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.Authenticator;
import java.net.CookieHandler;
import java.net.CookieManager;
import java.net.CookiePolicy;
import java.net.HttpURLConnection;
import java.net.PasswordAuthentication;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.regex.Pattern;
import com.mendix.core.Core;
import com.mendix.http.HttpHeader;
import com.mendix.http.HttpMethod;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

/**
 * This action runs a REST call using NTLM authentication.
 * 
 * The result of the action is the response from the provided REST url.
 */
public class Call_REST_NTLM extends CustomJavaAction<java.lang.String>
{
	private java.lang.String Location;
	private [module].proxies.ENUM_Http_Method HTTP_method;
	private java.lang.String Username;
	private java.lang.String Password;
	private com.mendix.systemwideinterfaces.javaactions.parameters.IStringTemplate Headers;
	private com.mendix.systemwideinterfaces.javaactions.parameters.IStringTemplate Body;

	public Call_REST_NTLM(IContext context, java.lang.String Location, java.lang.String HTTP_method, java.lang.String Username, java.lang.String Password, com.mendix.systemwideinterfaces.javaactions.parameters.IStringTemplate Headers, com.mendix.systemwideinterfaces.javaactions.parameters.IStringTemplate Body)
	{
		super(context);
		this.Location = Location;
		this.HTTP_method = HTTP_method == null ? null : [module].proxies.ENUM_Http_Method.valueOf(HTTP_method);
		this.Username = Username;
		this.Password = Password;
		this.Headers = Headers;
		this.Body = Body;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE

		// Get HTTP method
		HttpMethod method = this.getHttpMethod();

		// Get parts from the Username parameter
		String domain   = this.getDomain();
		String username = this.getUsername();
		String password = this.Password;

		/**
		 * Setup NTLM authentication
		 *
		 * @see https://stackoverflow.com/a/1053758/3601434
		 */
		Authenticator.setDefault(
			new Authenticator() {
				@Override
				public PasswordAuthentication getPasswordAuthentication() {
					return new PasswordAuthentication(domain + "\\" + username, password.toCharArray());
				}
			}
		);

		// Info: Log request
		this.info("Sending " + method.name() + " request to " + this.Location);

		/**
		 * Setup url connection
		 *
		 * @see https://stackoverflow.com/a/2793153/3601434
		 */
		CookieHandler.setDefault(new CookieManager(null, CookiePolicy.ACCEPT_ALL));
		URL request = new URL(this.Location);
		HttpURLConnection connection = (HttpURLConnection) request.openConnection();
		connection.setConnectTimeout(3 * 1000);
		connection.setRequestMethod(method.name());
		connection.setUseCaches(false);
		connection.setDoInput(true);

		// Set HTTP headers
		for (HttpHeader requestHeader : this.getHttpHeaders()) {
			connection.setRequestProperty(requestHeader.getName(), requestHeader.getValue());
		}

		// Debug: log request headers
		this.debug("Listing request headers...");
		Map<String, List<String>> requestHeaders = connection.getRequestProperties();
		for (Map.Entry<String, List<String>> requestHeader : requestHeaders.entrySet()) {
			this.debug("Request header > " + requestHeader.getKey() + ": " + requestHeader.getValue());
		}

		/**
		 * Handle post request
		 *
		 * @see https://stackoverflow.com/a/4206094/3601434
		 */
		if (Objects.equals("POST", method.name())) {
			connection.setDoOutput(true);

			byte[] postData = this.Body.toString().getBytes(StandardCharsets.UTF_8);
			connection.setRequestProperty("Content-Length", Integer.toString(postData.length));
			this.debug("Request header > Content-Length: " + Integer.toString(postData.length));
			try (DataOutputStream output = new DataOutputStream(connection.getOutputStream())) {
				output.write(postData);
			}
		}

		// Debug: log response headers
		this.debug("Listing response headers...");
		Map<String, List<String>> responseHeaders = connection.getHeaderFields();
		for (Map.Entry<String, List<String>> responseHeader : responseHeaders.entrySet()) {
			this.debug("Response header > " + responseHeader.getKey() + ": " + responseHeader.getValue());
		}

		// Get response from connection
		StringBuilder response = new StringBuilder();
		BufferedReader input = new BufferedReader(new InputStreamReader(connection.getInputStream()));

		String inputLine = "";
		while ((inputLine = input.readLine()) != null) {
			response.append(inputLine);
		}
		input.close();

		return response.toString();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Call_REST_NTLM";
	}

	// BEGIN EXTRA CODE

	/**
	 * Return the parts from the Username parameter
	 *
	 * @return Array of parts
	 * @throws Exception     [description]
	 */
	public java.lang.String[] getUsernameParts() throws Exception
	{
		// Define domain separator
		String separator = "\\";

		// Check for domain in Username parameter
		if (! this.Username.contains(separator)) {
			throw new com.mendix.systemwideinterfaces.MendixRuntimeException("Username parameter does not contain a domain.");
		}

		// Split parameter
		return this.Username.replaceAll(Pattern.quote(separator), "\\\\").split("\\\\");
	}

	/**
	 * Return the domain from the Username parameter
	 *
	 * @return Domain
	 */
	public java.lang.String getDomain() throws Exception
	{
		String[] parts = this.getUsernameParts();
		return parts[0];
	}

	/**
	 * Return the username from the Username parameter
	 *
	 * @return Username
	 */
	public java.lang.String getUsername() throws Exception
	{
		String[] parts = this.getUsernameParts();
		return parts[1];
	}

	/**
	 * Return the sanitized HTTP method
	 *
	 * @return HTTP method
	 */
	public com.mendix.http.HttpMethod getHttpMethod()
	{
		String defaultMethod = "GET";
		String[] allowedMethods = { "GET", "POST" };
		String selectedMethod = this.HTTP_method.name();

		// Check the enum's value for a valid http method
		if (Arrays.asList(allowedMethods).contains(selectedMethod)) {
			return HttpMethod.valueOf(selectedMethod);
		} else {
			return HttpMethod.valueOf(defaultMethod);
		}
	}

	/**
	 * Return the listed HTTP headers
	 *
	 * @return HTTP headers
	 */
	public List<com.mendix.http.HttpHeader> getHttpHeaders()
	{
		// Define key:value separator
		String separator = ":";

		// Split headers on line break
		String[] headersFromTemplate = this.Headers.toString().trim().split("\\r?\\n");
		List<HttpHeader> headerList = new LinkedList<HttpHeader>();

		// Walk all lines
		for (String line : headersFromTemplate) {

			// Add new header to the list
			if (line.contains(separator)) {
				String[] parts = line.trim().split(separator);
				headerList.add(new HttpHeader(parts[0], parts[1]));
			}
		}

		return headerList;
	}

	/**
	 * Log an info message to the Mx console
	 */
	public final void info(java.lang.String message) {
		Core.getLogger(this.toString()).info(message);
	}

	/**
	 * Log an info message to the Mx console
	 */
	public final void debug(java.lang.String message) {
		Core.getLogger(this.toString()).debug(message);
	}

	// END EXTRA CODE
}
